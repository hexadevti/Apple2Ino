#include <Arduino.h>
#line 1 "C:\\Users\\luciano\\repos\\Apple2Ino\\Apple2Ino.ino"

#line 2 "C:\\Users\\luciano\\repos\\Apple2Ino\\Apple2Ino.ino"
void setup();
#line 10 "C:\\Users\\luciano\\repos\\Apple2Ino\\Apple2Ino.ino"
void loop();
#line 80 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
void setflags();
#line 98 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
void push16(unsigned short pushval);
#line 103 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
void push8(unsigned char pushval);
#line 107 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
unsigned short pull16();
#line 112 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
unsigned char pull8();
#line 116 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
void run();
#line 34 "C:\\Users\\luciano\\repos\\Apple2Ino\\keyboard.ino"
unsigned char keyboard_read();
#line 38 "C:\\Users\\luciano\\repos\\Apple2Ino\\keyboard.ino"
void keyboard_strobe();
#line 43 "C:\\Users\\luciano\\repos\\Apple2Ino\\keyboard.ino"
void keyboard_begin();
#line 49 "C:\\Users\\luciano\\repos\\Apple2Ino\\keyboard.ino"
void keyboard_bit();
#line 6 "C:\\Users\\luciano\\repos\\Apple2Ino\\memory.ino"
unsigned char read8(unsigned short address);
#line 27 "C:\\Users\\luciano\\repos\\Apple2Ino\\memory.ino"
unsigned short read16(unsigned short address);
#line 31 "C:\\Users\\luciano\\repos\\Apple2Ino\\memory.ino"
void write8(unsigned short address, unsigned char value);
#line 47 "C:\\Users\\luciano\\repos\\Apple2Ino\\memory.ino"
void write16(unsigned short address, unsigned short value);
#line 4 "C:\\Users\\luciano\\repos\\Apple2Ino\\monitor.ino"
void program_hooks(unsigned short addr);
#line 115 "C:\\Users\\luciano\\repos\\Apple2Ino\\video.ino"
void video();
#line 165 "C:\\Users\\luciano\\repos\\Apple2Ino\\video.ino"
void blank_line(void);
#line 186 "C:\\Users\\luciano\\repos\\Apple2Ino\\video.ino"
void active_line(void);
#line 231 "C:\\Users\\luciano\\repos\\Apple2Ino\\video.ino"
void videowrite(short address, unsigned char value);
#line 237 "C:\\Users\\luciano\\repos\\Apple2Ino\\video.ino"
unsigned char videoread(short address);
#line 2 "C:\\Users\\luciano\\repos\\Apple2Ino\\Apple2Ino.ino"
void setup()
{
	Serial1.begin(115200);
    video();
    keyboard_begin();
    sei();
}

void loop()
{
    run();
}

#line 1 "C:\\Users\\luciano\\repos\\Apple2Ino\\cpu.ino"
// Î¼6502 - Barebones 6502 Emulator By Damian Peckett
// dpeckett.com, <damian@pecke.tt>

// Address Modes
#define AD_IMP	0x01
#define AD_A 	0x02
#define AD_ABS 	0x03
#define AD_ABSX	0x04
#define AD_ABSY	0x05
#define AD_IMM	0x06
#define AD_IND	0x07
#define AD_INDX	0x08
#define AD_INDY	0x09
#define AD_REL	0x0A
#define AD_ZPG	0x0B
#define AD_ZPGX	0x0C
#define AD_ZPGY	0x0D

// SR Flag Modes
#define FL_NONE 0x00
#define FL_Z 	0x20
#define FL_ZN 	0xA0
#define FL_ZNC	0xB0
#define FL_ZC 	0x30
#define FL_ALL	0xF0

//Unimplemented ops
#define UNDF	0x00

//Other constants
#define SR_FIXED_BITS 0x20
#define SR_CARRY      0x01
#define SR_ZERO       0x02
#define SR_INT        0x04
#define SR_DEC        0x08
#define SR_BRK        0x10
#define SR_OVER       0x40
#define SR_NEG        0x80

//Stack pointer base address
#define STP_BASE       0x100

//volatile unsigned char keymem = 0;

//high nibble SR flags, low nibble address mode
const unsigned char flags[] PROGMEM = {
	AD_IMP, AD_INDX, UNDF, UNDF, UNDF, FL_ZN|AD_ZPG, FL_ZNC|AD_ZPG, UNDF, AD_IMP, FL_ZN|AD_IMM, FL_ZNC|AD_A, UNDF, UNDF, FL_ZN|AD_ABS, FL_ZNC|AD_ABS, UNDF,
	AD_REL, FL_ZN|AD_INDY, UNDF, UNDF, UNDF, FL_ZN|AD_ZPGX, FL_ZNC|AD_ZPGX, UNDF, AD_IMP, FL_ZN|AD_ABSY, UNDF, UNDF, UNDF, FL_ZN|AD_ABSX, FL_ZNC|AD_ABSX, UNDF,
	AD_ABS, FL_ZN|AD_INDX, UNDF, UNDF, FL_Z|AD_ZPG, FL_ZN|AD_ZPG, FL_ZNC|AD_ZPG, UNDF, AD_IMP, FL_ZN|AD_IMM, FL_ZNC|AD_A, UNDF, FL_Z|AD_ABS, FL_ZN|AD_ABS, FL_ZNC|AD_ABS, UNDF,
	AD_REL, FL_ZN|AD_INDY, UNDF, UNDF, UNDF, FL_ZN|AD_ZPGX, FL_ZNC|AD_ZPGX, UNDF, AD_IMP, FL_ZN|AD_ABSY, UNDF, UNDF, UNDF, FL_ZN|AD_ABSX, FL_ZNC|AD_ABSX, UNDF,
	AD_IMP, FL_ZN|AD_INDX, UNDF, UNDF, UNDF, FL_ZN|AD_ZPG, FL_ZNC|AD_ZPG, UNDF, AD_IMP, FL_ZN|AD_IMM, FL_ZNC|AD_A, UNDF, AD_ABS, FL_ZN|AD_ABS, FL_ZNC|AD_ABS, UNDF,
	AD_REL, FL_ZN|AD_INDY, UNDF, UNDF, UNDF, FL_ZN|AD_ZPGX, FL_ZNC|AD_ZPGX, UNDF, AD_IMP, FL_ZN|AD_ABSY, UNDF, UNDF, UNDF, FL_ZN|AD_ABSX, FL_ZNC|AD_ABSX, UNDF,
	AD_IMP, FL_ALL|AD_INDX, UNDF, UNDF, UNDF, FL_ALL|AD_ZPG, FL_ZNC|AD_ZPG, UNDF, FL_ZN|AD_IMP, FL_ALL|AD_IMM, FL_ZNC|AD_A,UNDF, AD_IND, FL_ALL|AD_ABS, FL_ZNC|AD_ABS, UNDF,
	AD_REL, FL_ALL|AD_INDY, UNDF, UNDF, UNDF, FL_ALL|AD_ZPGX, FL_ZNC|AD_ZPGX, UNDF, AD_IMP, FL_ALL|AD_ABSY, UNDF, UNDF, UNDF, FL_ALL|AD_ABSX, FL_ZNC|AD_ABSX, UNDF,
	UNDF, AD_INDX, UNDF, UNDF, AD_ZPG, AD_ZPG, AD_ZPG, UNDF, FL_ZN|AD_IMP, UNDF, FL_ZN|AD_IMP, UNDF, AD_ABS, AD_ABS, AD_ABS, UNDF,
	AD_REL, AD_INDY, UNDF, UNDF, AD_ZPGX, AD_ZPGX, AD_ZPGY, UNDF, FL_ZN|AD_IMP, AD_ABSY, AD_IMP, UNDF, UNDF, AD_ABSX, UNDF, UNDF,
	FL_ZN|AD_IMM, FL_ZN|AD_INDX, FL_ZN|AD_IMM, UNDF, FL_ZN|AD_ZPG, FL_ZN|AD_ZPG, FL_ZN|AD_ZPG, UNDF, FL_ZN|AD_IMP, FL_ZN|AD_IMM, FL_ZN|AD_IMP, UNDF, FL_ZN|AD_ABS, FL_ZN|AD_ABS, FL_ZN|AD_ABS, UNDF,
	AD_REL, FL_ZN|AD_INDY, UNDF, UNDF, FL_ZN|AD_ZPGX, FL_ZN|AD_ZPGX, FL_ZN|AD_ZPGY, UNDF, AD_IMP, FL_ZN|AD_ABSY, FL_ZN|AD_IMP, UNDF, FL_ZN|AD_ABSX, FL_ZN|AD_ABSX, FL_ZN|AD_ABSY, UNDF,
	FL_ZNC|AD_IMM, FL_ZNC|AD_INDX, UNDF, UNDF, FL_ZNC|AD_ZPG, FL_ZNC|AD_ZPG, FL_ZN|AD_ZPG, UNDF, FL_ZN|AD_IMP, FL_ZNC|AD_IMM, FL_ZN|AD_IMP, UNDF, FL_ZNC|AD_ABS, FL_ZNC|AD_ABS,	FL_ZN|AD_ABS, UNDF,
	AD_REL, FL_ZNC|AD_INDY, UNDF, UNDF, UNDF, FL_ZNC|AD_ZPGX, FL_ZN|AD_ZPGX, UNDF, AD_IMP, FL_ZNC|AD_ABSY, UNDF, UNDF, UNDF, FL_ZNC|AD_ABSX, FL_ZN|AD_ABSX, UNDF,
	FL_ZNC|AD_IMM, FL_ALL|AD_INDX, UNDF, UNDF, FL_ZNC|AD_ZPG, FL_ALL|AD_ZPG, FL_ZN|AD_ZPG, UNDF, FL_ZN|AD_IMP, FL_ALL|AD_IMM, AD_IMP, UNDF, FL_ZNC|AD_ABS, FL_ALL|AD_ABS,	FL_ZN|AD_ABS, UNDF,
	AD_REL, FL_ALL|AD_INDY, UNDF, UNDF, UNDF, FL_ALL|AD_ZPGX, FL_ZN|AD_ZPGX, UNDF, AD_IMP, FL_ALL|AD_ABSY, UNDF, UNDF, UNDF, FL_ALL|AD_ABSX, FL_ZN|AD_ABSX, UNDF
};

char buf[0xff];

// CPU registers
unsigned short PC;
unsigned short lastPC;
unsigned char STP = 0xFD, A = 0x00, X = 0x00, Y = 0x00, SR = SR_FIXED_BITS;

//Execution variables
unsigned char opcode, opflags;
unsigned short argument_addr;

//Temporary variables for flag generation
unsigned char value8;
unsigned short value16, value16_2, result;

void setflags() {
  // Mask out affected flags
  switch(opflags&0xF0) {
    case 0xA0: SR&=0x7D; break;
    case 0xB0: SR&=0x7C; break;
    case 0x30: SR&=0xFC; break;
    case 0xF0: SR&=0x3C; break;
    case 0x20: SR&=0xFD; break;
  }

  // Set various status flags
  if(opflags&0x80) SR |= (result&0x0080); //negative
  if(opflags&0x20) SR |= (((result&0xFF) == 0)?0x02:0); //zero
  if(opflags&0x10) SR |= ((result&0xFF00)?0x01:0); //carry
  if(opflags&0x40) SR |= ((result^((unsigned short)A))&(result^value16)&0x0080)>>1; 
}

// Stack functions
void push16(unsigned short pushval) {
  write8(STP_BASE + (STP--), (pushval>>8)&0xFF);
  write8(STP_BASE + (STP--), pushval&0xFF);
}

void push8(unsigned char pushval) {
  write8(STP_BASE + (STP--), pushval);
}

unsigned short pull16() {
  value16 = read8(STP_BASE + (++STP)) | ((unsigned short)read8(STP_BASE + (++STP))<< 8);
  return value16;
}

unsigned char pull8() {
  return read8(STP_BASE + (++STP));
}

void run() {
  
  // Load the reset vector
  PC = read16(0xFFFC);
  STP = 0xFD;
  
  for(;;) {

    // if (Serial1.available()) {
    //   keymem = Serial1.read() | 0x80;
    // }
    // Routines for hooking apple ][ monitor routines
    //program_hooks(PC);
    lastPC = PC;
    // Get opcode / addressing mode
    opcode = read8(PC++);
    
    opflags = pgm_read_byte_near(flags+opcode);
  
    // Addressing modes
    switch(opflags&0x0F) {
      case AD_IMP: case AD_A: argument_addr = 0xFFFF; break;
      case AD_ABS:
        argument_addr = read16(PC);
        PC += 2;
        break;
      case AD_ABSX:
        argument_addr = read16(PC) + (unsigned short)X;
        PC += 2;
        break;
      case AD_ABSY:
        argument_addr = read16(PC) + (unsigned short)Y;
        PC += 2;
        break;
      case AD_IMM:
        argument_addr = PC++;
        break;
      case AD_IND:
        argument_addr = read16(PC);
        value16 = (argument_addr&0xFF00) | ((argument_addr+1)&0x00FF); // Page wrap
        argument_addr = (unsigned short)read8(argument_addr) | ((unsigned short)read8(value16) << 8);
        PC+=2;
        break;
      case AD_INDX:
        argument_addr = ((unsigned short)read8(PC++) + (unsigned short)X)&0xFF;
        value16 = (argument_addr&0xFF00) | ((argument_addr+1)&0x00FF); // Page wrap
        argument_addr = (unsigned short)read8(argument_addr) | ((unsigned short)read8(value16) << 8);
        break;
      case AD_INDY:
        argument_addr = (unsigned short)read8(PC++);
        value16 = (argument_addr&0xFF00) | ((argument_addr+1)&0x00FF); // Page wrap
        argument_addr = (unsigned short)read8(argument_addr) | ((unsigned short)read8(value16) << 8);
        argument_addr += Y;
        break;
      case AD_REL:
        argument_addr = (unsigned short)read8(PC++);
        argument_addr |= ((argument_addr&0x80)?0xFF00:0);
        break;
      case AD_ZPG:
        argument_addr = (unsigned short)read8(PC++);
        break;
      case AD_ZPGX:
        argument_addr = ((unsigned short)read8(PC++) + (unsigned short)X)&0xFF;
        break;
      case AD_ZPGY:
        argument_addr = ((unsigned short)read8(PC++) + (unsigned short)Y)&0xFF;
        break;
      }
      
      //opcodes
      switch(opcode) {
        //ADC
        case 0x69: case 0x65: case 0x75:
        case 0x6D: case 0x7D: case 0x79:
        case 0x61: case 0x71:
          value16 = (unsigned short)read8(argument_addr);
          result = (unsigned short)A + value16 + (unsigned short)(SR&SR_CARRY);
          setflags();
          A = result&0xFF;
          break;
        //AND
        case 0x29: case 0x25: case 0x35:
        case 0x2D: case 0x3D: case 0x39:
        case 0x21: case 0x31:
          result = A&read8(argument_addr);
          A = result&0xFF;
          setflags();
          break;
        //ASL A
        case 0x0A:
          value16 = (unsigned short)A;
          result = value16<<1;
          setflags();
          A = result&0xFF;
          break;
        //ASL
        case 0x06: case 0x16: case 0x0E: 
        case 0x1E:
          value16 = read8(argument_addr);
          result = value16<<1;
          setflags();
          write8(argument_addr, result&0xFF);
          break;
        //BCC
        case 0x90:
          if(!(SR&SR_CARRY)) PC += argument_addr;
          break;
        //BCS
        case 0xB0:
          if((SR&SR_CARRY)) PC += argument_addr;
          break;
        //BEQ
        case 0xF0:
          if((SR&SR_ZERO)) PC += argument_addr;
          break;
        //BNE
        case 0xD0:
          if(!(SR&SR_ZERO)) PC += argument_addr;
          break;
        //BIT
        case 0x24: case 0x2C:
          value8 = read8(argument_addr);
          result = A & value8;
          setflags();
          SR = (SR&0x3F) | (value8&0xC0);
          break;
        //BMI
        case 0x30:
          if((SR&SR_NEG)) PC += argument_addr;
          break;
        //BPL
        case 0x10:
          if(!(SR&SR_NEG)) PC += argument_addr;
          break;
        //BRK
        case 0x00:
          PC++;
          push16(PC);
          push8(SR|SR_BRK);
          SR|=SR_INT;
          PC = read16(0xFFFE);
          break;
        //BVC
        case 0x50:
          if(!(SR&SR_OVER)) PC += argument_addr;
          break;
        //BVS
        case 0x70:
          if(SR&SR_OVER) PC += argument_addr;
          break;
        //CLC
        case 0x18:
          SR&=0xFE;
          break;
        //CLD
        case 0xD8:
          SR&=0xF7;
          break;
        //CLI
        case 0x58:
          SR&=0xFB;
          break;
        //CLV
        case 0xB8:
          SR&=0xBF;
          break;
        //CMP
        case 0xC9: case 0xC5: case 0xD5:
        case 0xCD: case 0xDD: case 0xD9:
        case 0xC1: case 0xD1:
          value16 = ((unsigned short)read8(argument_addr)) ^ 0x00FF;
          result = (unsigned short)A + value16 + (unsigned short)1;
          setflags();
          break;
        //CPX
        case 0xE0: case 0xE4: case 0xEC:
          value16 = ((unsigned short)read8(argument_addr)) ^ 0x00FF;
          result = (unsigned short)X + value16 + (unsigned short)1;
          setflags();
          break;
        //CPY
        case 0xC0: case 0xC4: case 0xCC:
          value16 = ((unsigned short)read8(argument_addr)) ^ 0x00FF;
          result = (unsigned short)Y + value16 + (unsigned short)1;
          setflags();
          break;
        //DEC
        case 0xC6: case 0xD6: case 0xCE: 
        case 0xDE:
          value16 = (unsigned short)read8(argument_addr);
          result = value16 - 1;
          setflags();
          write8(argument_addr, result&0xFF);
          break;
        //DEX
        case 0xCA:
          result = --X;
          setflags();
          break;
        //DEY
        case 0x88:
          result = --Y;
          setflags();
          break;
        //EOR
        case 0x49: case 0x45: case 0x55:
        case 0x4D: case 0x5D: case 0x59:
        case 0x41: case 0x51:
          value8 = read8(argument_addr);
          result = A^value8;
          setflags();
          A = result&0xFF;
          break;
        //INC
        case 0xE6: case 0xF6: case 0xEE:
        case 0xFE:
          value16 = (unsigned short)read8(argument_addr);
          result = value16 + 1;
          setflags();
          write8(argument_addr, result&0xFF);	
          break;
        //INX
        case 0xE8:
          result = ++X;
          setflags();
          break;
        //INY
        case 0xC8:
          result = ++Y;
          setflags();	
          break;
        //JMP
        case 0x4C: case 0x6C:
          PC = argument_addr;
          break;
        //JSR
        case 0x20:
          push16(PC-1);
          PC = argument_addr;
          break;
        //LDA
        case 0xA9: case 0xA5: case 0xB5:
        case 0xAD: case 0xBD: case 0xB9:
        case 0xA1: case 0xB1:
          A = read8(argument_addr);
          result = A;
          setflags();
          break;
        //LDX
        case 0xA2: case 0xA6: case 0xB6:
        case 0xAE: case 0xBE:
          X = read8(argument_addr);
          result = X;
          setflags();
          break;
        //LDY
        case 0xA0: case 0xA4: case 0xB4:
        case 0xAC: case 0xBC:
          Y = read8(argument_addr);
          result = Y;
          setflags();
          break;
        //LSR A
        case 0x4A:
          value8 = A;
          result = value8 >> 1;
          result |= (value8&0x1)?0x8000:0;
          setflags();
          A = result&0xFF;
          break;
        //LSR
        case 0x46: case 0x56: case 0x4E:
        case 0x5E:
          value8 = read8(argument_addr);
          result = value8 >> 1;
          result |= (value8&0x1)?0x8000:0;
          setflags();
          write8(argument_addr, result&0xFF);
          break;
        //NOP
        case 0xEA:
          break;
        //ORA
        case 0x09: case 0x05: case 0x15:
        case 0x0D: case 0x1D: case 0x19:
        case 0x01: case 0x11:
          value8 = read8(argument_addr);
          result = A | value8;
          setflags();
          A = result&0xFF;
          break;
        //PHA
        case 0x48:
          push8(A);
          break;
        //PHP
        case 0x08:
          push8(SR|SR_BRK);
          break;
        //PLA
        case 0x68:
          result = pull8();
          setflags();
          A = result;
          break;
       //PLP
      case 0x28:
        SR = pull8() | SR_FIXED_BITS;
        break;
      //ROL A
      case 0x2A:
        value16 = (unsigned short)A;
        result = (value16 << 1) | (SR&SR_CARRY);
        setflags();	
        A = result&0xFF;
        break;
      //ROL
      case 0x26: case 0x36: case 0x2E: 
      case 0x3E:
        value16 = (unsigned short)read8(argument_addr);
        result = (value16 << 1) | (SR&SR_CARRY);
        setflags();
        write8(argument_addr, result&0xFF);
        break;
      //ROR A
      case 0x6A:
        value16 = (unsigned short)A;
        result = (value16 >> 1) | ((SR&SR_CARRY) << 7);
        result |= (value16&0x1)?0x8000:0;
        setflags();
        A = result&0xFF;
        break;
      //ROR
      case 0x66: case 0x76: case 0x6E: 
      case 0x7E:
        value16 = (unsigned short)read8(argument_addr);
        result = (value16 >> 1) | ((SR&SR_CARRY) << 7);
        result |= (value16&0x1)?0x8000:0;
        setflags();
        write8(argument_addr, result&0xFF);
        break;
      //RTI
      case 0x40:
        SR = pull8();
        PC = pull16();
        break;
      //RTS
      case 0x60:
        PC = pull16() + 1;
        break;
      //SBC
      case 0xE9: case 0xE5: case 0xF5:
      case 0xED: case 0xFD: case 0xF9:
      case 0xE1: case 0xF1:
        value16 = ((unsigned short)read8(argument_addr)) ^ 0x00FF;
        result = (unsigned short)A + value16 + (unsigned short)(SR&SR_CARRY);
        setflags();
        A = result&0xFF;
        break;
      //SEC
      case 0x38:
        SR |= SR_CARRY;
        break;
      //SED
      case 0xF8:
        SR |= SR_DEC;
        break;
      //SEI
      case 0x78:
        SR |= SR_INT;
        break;
      //STA
      case 0x85: case 0x95: case 0x8D:
      case 0x9D: case 0x99: case 0x81:
      case 0x91:
        write8(argument_addr, A);
        break;
      //STX
      case 0x86: case 0x96: case 0x8E:
        write8(argument_addr, X);
        break;
      //STY
      case 0x84: case 0x94: case 0x8C:
        write8(argument_addr, Y);
        break;
      //TAX
      case 0xAA:
        X = A;
        result = A;
        setflags();
        break;
      //TAY
      case 0xA8:
        Y = A;
        result = A;
        setflags();
        break;
      //TSX
      case 0xBA:
        X = STP;
        result = STP;
        setflags();
        break;
      //TXA
      case 0x8A:
        A = X;
        result = X;
        setflags();
        break;
      //TXS
      case 0x9A:
        STP = X;
        result = X;
        setflags();
        break;
      //TYA
      case 0x98:
        A = Y;
        result = Y;
        setflags();
        break;
      }
    }
}

#line 1 "C:\\Users\\luciano\\repos\\Apple2Ino\\keyboard.ino"
#include <avr/wdt.h>

#define KEYBD_DATA_PIN 5

const unsigned char scancode_to_apple[] PROGMEM = {
 //$0    $1    $2    $3    $4    $5    $6    $7    $8    $9    $A    $B    $C    $D    $E    $F
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //$00
  0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0xB1, 0x00, 0x00, 0x00, 0xDA, 0xD3, 0xC1, 0xD7, 0xB2, 0x00, //$10
  0x00, 0xC3, 0xD8, 0xC4, 0xC5, 0xB4, 0xB3, 0x00, 0x00, 0xA0, 0xD6, 0xC6, 0xD4, 0xD2, 0xB5, 0x00, //$20
  0x00, 0xCE, 0xC2, 0xC8, 0xC7, 0xD9, 0xB6, 0x00, 0x00, 0x00, 0xCD, 0xCA, 0xD5, 0xB7, 0xB8, 0x00, //$30
  0x00, 0xAC, 0xCB, 0xC9, 0xCF, 0xB0, 0xB9, 0x00, 0x00, 0xAE, 0xAF, 0xCC, 0xBB, 0xD0, 0xAD, 0x00, //$40
  0x00, 0x00, 0xA7, 0x00, 0x00, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00, //$50
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0xB1, 0x00, 0xB4, 0xB7, 0x00, 0x00, 0x00, //$60
  0xB0, 0xAE, 0xB2, 0xB5, 0xB6, 0xB8, 0x9B, 0x00, 0x00, 0xAB, 0xB3, 0xAD, 0xAA, 0xB9, 0x00, 0x00,  //$70
  // High mirror, shift modified keys
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //$80 0
  0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0xA1, 0x00, 0x00, 0x00, 0xDA, 0xD3, 0xC1, 0xD7, 0xC0, 0x00, //$90 1
  0x00, 0xC3, 0xD8, 0xC4, 0xC5, 0xA4, 0xA3, 0x00, 0x00, 0xA0, 0xD6, 0xC6, 0xD4, 0xD2, 0xA5, 0x00, //$A0 2
  0x00, 0xCE, 0xC2, 0xC8, 0xC7, 0xD9, 0xDE, 0x00, 0x00, 0x00, 0xCD, 0xCA, 0xD5, 0xA6, 0xAA, 0x00, //$B0 3
  0x00, 0xBC, 0xCB, 0xC9, 0xCF, 0xA9, 0xA8, 0x00, 0x00, 0xBE, 0xBF, 0xCC, 0xBA, 0xD0, 0xAD, 0x00, //$C0 4 
  0x00, 0x00, 0xA2, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00, //$D0 5
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0xB1, 0x00, 0xB4, 0xB7, 0x00, 0x00, 0x00, //$E0 6
  0xB0, 0xAE, 0xB2, 0xB5, 0xB6, 0xB8, 0x9B, 0x00, 0x00, 0xAB, 0xB3, 0xAD, 0xAA, 0xB9, 0x00, 0x00  //$F0 7
};

// keyboard scan buffer
unsigned short keyboard_data[3] = {0, 0, 0};
unsigned char keyboard_buf_indx = 0, keyboard_mbyte = 0;
boolean shift_enabled = false;

// In apple II scancode format
volatile unsigned char keymem = 0;

unsigned char keyboard_read() {
  return keymem;
}

void keyboard_strobe() {
  keymem&=0x7F;
}

// clock must be on digital 3
void keyboard_begin() {
  pinMode(3, INPUT_PULLUP);
  pinMode(KEYBD_DATA_PIN, INPUT_PULLUP);
  attachInterrupt(1, keyboard_bit, FALLING);
}

void keyboard_bit() {
  if(digitalRead(KEYBD_DATA_PIN))keyboard_data[2] |= _BV(keyboard_buf_indx);
  else keyboard_data[2] &= ~(_BV(keyboard_buf_indx));
  if(++keyboard_buf_indx == 11) {
    // Ignore parity checks for now
    keyboard_data[2] = (keyboard_data[2]>>1)&0xFF;
    
    // extended keys
    if(keyboard_data[2] == 0xF0 || keyboard_data[2] == 0xE0) keyboard_mbyte = 1;
    else {
      //decrement counter for multibyte commands
      if(keyboard_mbyte) keyboard_mbyte--;
      // multibyte command is finished / normal command, process it
      if(!keyboard_mbyte) {
        if(keyboard_data[1] != 0xF0 && keyboard_data[1] != 0xE0) {
          //Standard keys
          if(keyboard_data[2] == 0x12 || keyboard_data[2] == 0x59) shift_enabled = true; //shift modifiers
          else keymem = pgm_read_byte_near(scancode_to_apple+keyboard_data[2]+((shift_enabled)?0x80:0x00));
        } else if(keyboard_data[0] != 0xF0 && keyboard_data[1] == 0xE0) {
          //Extended keys
          if(keyboard_data[2] == 0x6B) keymem = 0x95; //back key
          if(keyboard_data[2] == 0x74) keymem = 0x88; //forward key
          // Power management keys, hardware reset
          if(keyboard_data[2] == 0x37) {
            // enable watchdog with min timeout
            // wait until reset
            wdt_enable(WDTO_15MS);
            for(;;);            
          }
        } else if(keyboard_data[1] == 0xF0 && (keyboard_data[2] == 0x12 || keyboard_data[2] == 0x59)) shift_enabled = false;  
      }      
    }

    //shuffle buffer
    keyboard_data[0] = keyboard_data[1];
    keyboard_data[1] = keyboard_data[2];
    keyboard_buf_indx = 0;
  }
}

#line 1 "C:\\Users\\luciano\\repos\\Apple2Ino\\memory.ino"
#include "rom.h"
unsigned char ram[1048];
// Free memory for storing BASIC programs
unsigned char basic[512];

unsigned char read8(unsigned short address) {
  unsigned char page = address>>8;
  if(page < 0x04) {
    return ram[address];
  } else if (page >= 0x04 && page < 0x08) {
    return videoread(address);
  } else if (page >= 0x08 && page < 0x10) {
    return basic[address-0x800];
  } else if (page >= 0xD0) {
    return pgm_read_byte_near(rom+address-0xD000);
  } else {
    // Keyboard Data
    if(address == 0xC000) return keyboard_read();
    // Keyboard Strobe
    if(address == 0xC010) keyboard_strobe();
    // Speaker toggle
    // if(address == 0xC030) speaker_toggle();
    return 0;
  }
}

unsigned short read16(unsigned short address) {
  return (unsigned short)read8(address) | (((unsigned short)read8(address+1))<<8);
}

void write8(unsigned short address, unsigned char value) {
  unsigned char page = address>>8;
  if(page < 0x04) {
    ram[address] = value;
  } else if(page >= 0x04 && page < 0x08) {
    videowrite(address, value);
  } else if (page >= 0x08 && page < 0x10) {
    basic[address-0x800] = value;
  } else {
    // Keyboard Strobe
    if(address == 0xC010) keyboard_strobe();
    // Speaker toggle
    //if(address == 0xC030) speaker_toggle();
  }
}

void write16(unsigned short address, unsigned short value) {
   write8(address, value&0x00FF);
   write8(address+1, (value>>8)&0x00FF);
}


#line 1 "C:\\Users\\luciano\\repos\\Apple2Ino\\monitor.ino"
// Hook routines for the apple II monitor program
// Used to trick the apple code into working on this hardware
// Ideally should patch the ROM itself, will do in future.
void program_hooks(unsigned short addr) {
  // hook screen scroll, monitor command
  // if(addr == 0xFC70) {
  //   screenScroll();
  //   PC = 0xFC95;
  // } 
//   // hook cassette write commnand
//   else if (addr == 0xFECD || addr == 0xFECF) {
//     // Header length
//     cassette_header((addr==0xFECD)?64:A);
//     // Write Data Block
//     cassette_write_block(read16(0x3C), read16(0x3E));
//     // Emulate counter behaviour
//     write16(0x003C, read16(0x3E));
//     PC = 0xFEF5;
//   }
//   // hook cassette read command
//   else if (addr == 0xFEFD) {
//       // Read Data Block
//       boolean success = cassette_read_block(read16(0x3C), read16(0x3E));
//       // Emulate counter behaviour
//       write16(0x003C, read16(0x3E));
//       if(success) PC = 0xFF3A; 
//       else PC = 0xFF2D;
//   }
}

#line 1 "C:\\Users\\luciano\\repos\\Apple2Ino\\video.ino"
/*
 * Output NTSC video using the UART in SPI master mode on Arduino Uno.
 * 40x25 character buffer is rasterized and scanned out in real-time.
 * 320X200 pixels out of 1000 RAM bytes and 1K Flash character ROM.
 * VIDEO on pin 1 (470 ohm resistor), SYNC on pin 9 (1K ohm resistor).
 *
 * Blatantly using code from:
 * TVout                 - http://playground.arduino.cc/Main/TVout
 * VGAout                - http://www.gammon.com.au/forum/?id=11608
 * Color TVout using SPI - http://www.hackster.io/janost/avr-videoblaster
 *
 * Dave Schmenk
 */
//
// Timing settings for NTSC
//
#define _CYCLES_PER_US          (F_CPU / 1000000)
#define _TIME_HSYNC             4.7
#define _TIME_VSYNC             58.85
#define _TIME_ACTIVE            46
#define _CYCLES_VSYNC           ((_TIME_VSYNC * _CYCLES_PER_US) - 1)
#define _CYCLES_HSYNC           ((_TIME_HSYNC * _CYCLES_PER_US) - 1)
#define _NTSC_TIME_SCANLINE      63.55
#define _NTSC_TIME_OUTPUT_START  12
#define _NTSC_LINE_FRAME         262
#define _NTSC_LINE_START_VSYNC   0
#define _NTSC_LINE_STOP_VSYNC    3
#define _NTSC_LINE_DISPLAY       216
#define _NTSC_LINE_MID           ((_NTSC_LINE_FRAME - _NTSC_LINE_DISPLAY)/2 + _NTSC_LINE_DISPLAY/2 + _NTSC_LINE_STOP_VSYNC)
#define _NTSC_CYCLES_SCANLINE    ((_NTSC_TIME_SCANLINE * _CYCLES_PER_US) - 1)
#define _NTSC_CYCLES_OUTPUT_START ((_NTSC_TIME_OUTPUT_START * _CYCLES_PER_US) - 1)
//
// video = UART SPI TX
//
#define PORT_VID     PORTE
#define	DDR_VID     DDRD
#define	VID_PIN     1
#define XCK0_DDR     DDRD
#define XCK0         4
//
// sync = OC1A
//
#define PORT_SYNC    PORTB
#define DDR_SYNC     DDRB
#define SYNC_PIN     5
//
// video buffer
//
#define VID_WIDTH    40
#define VID_HEIGHT   24
#define CELL_WIDTH   8
#define CELL_HEIGHT  8
byte xpos=0;
byte ypos=0;
char videomem[0x400]; //char videomem[VID_WIDTH*VID_HEIGHT];
//
// rendering values
//
char *videoptr = videomem;
int scanline=0;
void (*line_handler)(void) = &blank_line;
volatile byte vblank=0;
//
// character definitions
//
PROGMEM const byte charROM [1024] = {
0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x80,0x01,0xFF,0x18,0x18,0x18,0x00,0x18,0xFF,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x30,0x6C,0x6C,0x30,0x00,0x38,0x60,0x18,0x60,0x00,0x00,0x00,0x00,0x00,0x06,0x7C,0x30,0x78,0x78,0x1C,0xFC,0x38,0xFC,0x78,0x78,0x00,0x00,0x18,0x00,0x60,0x78,0x7C,0x30,0xFC,0x3C,0xF8,0xFE,0xFE,0x3C,0xCC,0x78,0x1E,0xE6,0xF0,0xC6,0xC6,0x38,0xFC,0x78,0xFC,0x78,0xFC,0xCC,0xCC,0xC6,0xC6,0xCC,0xFE,0x78,0xC0,0x78,0x10,0x00,0x30,0x00,0xE0,0x00,0x1C,0x00,0x38,0x00,0xE0,0x30,0x0C,0xE0,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x18,0xE0,0x76,0xAA,
0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0xE0,0x07,0xFF,0x18,0x18,0x18,0x00,0x18,0xFF,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x78,0x6C,0x6C,0x7C,0xC6,0x6C,0x60,0x30,0x30,0x66,0x30,0x00,0x00,0x00,0x0C,0xC6,0x70,0xCC,0xCC,0x3C,0xC0,0x60,0xCC,0xCC,0xCC,0x30,0x30,0x30,0x00,0x30,0xCC,0xC6,0x78,0x66,0x66,0x6C,0x62,0x62,0x66,0xCC,0x30,0x0C,0x66,0x60,0xEE,0xE6,0x6C,0x66,0xCC,0x66,0xCC,0xB4,0xCC,0xCC,0xC6,0xC6,0xCC,0xC6,0x60,0x60,0x18,0x38,0x00,0x30,0x00,0x60,0x00,0x0C,0x00,0x6C,0x00,0x60,0x00,0x00,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x30,0xDC,0x55,
0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0xF8,0x1F,0xC3,0x18,0x3C,0x18,0x00,0x18,0x7E,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x78,0x6C,0xFE,0xC0,0xCC,0x38,0xC0,0x60,0x18,0x3C,0x30,0x00,0x00,0x00,0x18,0xCE,0x30,0x0C,0x0C,0x6C,0xF8,0xC0,0x0C,0xCC,0xCC,0x30,0x30,0x60,0xFC,0x18,0x0C,0xDE,0xCC,0x66,0xC0,0x66,0x68,0x68,0xC0,0xCC,0x30,0x0C,0x6C,0x60,0xFE,0xF6,0xC6,0x66,0xCC,0x66,0xE0,0x30,0xCC,0xCC,0xC6,0x6C,0xCC,0x8C,0x60,0x30,0x18,0x6C,0x00,0x18,0x78,0x60,0x78,0x0C,0x78,0x60,0x76,0x6C,0x70,0x0C,0x66,0x30,0xCC,0xF8,0x78,0xDC,0x76,0xDC,0x7C,0x7C,0xCC,0xCC,0xC6,0xC6,0xCC,0xFC,0x30,0x18,0x30,0x00,0xAA,
0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xFF,0xFE,0x7F,0xC3,0x1F,0x3C,0x18,0x1F,0x1F,0x7E,0xF8,0xFF,0xFF,0xF8,0xF8,0xFF,0xFF,0x00,0x30,0x00,0x6C,0x78,0x18,0x76,0x00,0x60,0x18,0xFF,0xFC,0x00,0xFC,0x00,0x30,0xDE,0x30,0x38,0x38,0xCC,0x0C,0xF8,0x18,0x78,0x7C,0x00,0x00,0xC0,0x00,0x0C,0x18,0xDE,0xCC,0x7C,0xC0,0x66,0x78,0x78,0xC0,0xFC,0x30,0x0C,0x78,0x60,0xFE,0xDE,0xC6,0x7C,0xCC,0x7C,0x70,0x30,0xCC,0xCC,0xD6,0x38,0x78,0x18,0x60,0x18,0x18,0xC6,0x00,0x00,0x0C,0x7C,0xCC,0x7C,0xCC,0xF0,0xCC,0x76,0x30,0x0C,0x6C,0x30,0xFE,0xCC,0xCC,0x66,0xCC,0x76,0xC0,0x30,0xCC,0xCC,0xD6,0x6C,0xCC,0x98,0xE0,0x00,0x1C,0x00,0x55,
0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xC3,0x1F,0x7E,0x18,0x1F,0x1F,0x3C,0xF8,0xFF,0xFF,0xF8,0xF8,0xFF,0xFF,0x00,0x30,0x00,0xFE,0x0C,0x30,0xDC,0x00,0x60,0x18,0x3C,0x30,0x00,0x00,0x00,0x60,0xF6,0x30,0x60,0x0C,0xFE,0x0C,0xCC,0x30,0xCC,0x0C,0x00,0x00,0x60,0x00,0x18,0x30,0xDE,0xFC,0x66,0xC0,0x66,0x68,0x68,0xCE,0xCC,0x30,0xCC,0x6C,0x62,0xD6,0xCE,0xC6,0x60,0xDC,0x6C,0x1C,0x30,0xCC,0xCC,0xFE,0x38,0x30,0x32,0x60,0x0C,0x18,0x00,0x00,0x00,0x7C,0x66,0xC0,0xCC,0xFC,0x60,0xCC,0x66,0x30,0x0C,0x78,0x30,0xFE,0xCC,0xCC,0x66,0xCC,0x66,0x78,0x30,0xCC,0xCC,0xFE,0x38,0xCC,0x30,0x30,0x18,0x30,0x00,0xAA,
0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0xF8,0x1F,0xC3,0x00,0x7E,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x6C,0xF8,0x66,0xCC,0x00,0x30,0x30,0x66,0x30,0x30,0x00,0x30,0xC0,0xE6,0x30,0xCC,0xCC,0x0C,0xCC,0xCC,0x30,0xCC,0x18,0x30,0x30,0x30,0xFC,0x30,0x00,0xC0,0xCC,0x66,0x66,0x6C,0x62,0x60,0x66,0xCC,0x30,0xCC,0x66,0x66,0xC6,0xC6,0x6C,0x60,0x78,0x66,0xCC,0x30,0xCC,0x78,0xEE,0x6C,0x30,0x66,0x60,0x06,0x18,0x00,0x00,0x00,0xCC,0x66,0xCC,0xCC,0xC0,0x60,0x7C,0x66,0x30,0xCC,0x6C,0x30,0xD6,0xCC,0xCC,0x7C,0x7C,0x60,0x0C,0x34,0xCC,0x78,0xFE,0x6C,0x7C,0x64,0x30,0x18,0x30,0x00,0x55,
0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0x00,0xFF,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x30,0x00,0x6C,0x30,0xC6,0x76,0x00,0x18,0x60,0x00,0x00,0x30,0x00,0x30,0x80,0x7C,0xFC,0xFC,0x78,0x1E,0x78,0x78,0x30,0x78,0x70,0x30,0x30,0x18,0x00,0x60,0x30,0x78,0xCC,0xFC,0x3C,0xF8,0xFE,0xF0,0x3E,0xCC,0x78,0x78,0xE6,0xFE,0xC6,0xC6,0x38,0xF0,0x1C,0xE6,0x78,0x78,0xFC,0x30,0xC6,0xC6,0x78,0xFE,0x78,0x02,0x78,0x00,0x00,0x00,0x76,0xDC,0x78,0x76,0x78,0xF0,0x0C,0xE6,0x78,0xCC,0xE6,0x78,0xC6,0xCC,0x78,0x60,0x0C,0xF0,0xF8,0x18,0x76,0x30,0x6C,0xC6,0x0C,0xFC,0x1C,0x18,0xE0,0x00,0xAA,
0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0x00,0xFF,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0xF0,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x55,
};

const short convertVideo[] = {
0x000, 0x001, 0x002, 0x003, 0x004, 0x005, 0x006, 0x007, 0x008, 0x009, 0x00a, 0x00b, 0x00c, 0x00d, 0x00e, 0x00f, 0x010, 0x011, 0x012, 0x013, 0x014, 0x015, 0x016, 0x017, 0x018, 0x019, 0x01a, 0x01b, 0x01c, 0x01d, 0x01e, 0x01f, 0x020, 0x021, 0x022, 0x023, 0x024, 0x025, 0x026, 0x027,
0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x148, 0x149, 0x14a, 0x14b, 0x14c, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 0x154, 0x155, 0x156, 0x157, 0x158, 0x159, 0x15a, 0x15b, 0x15c, 0x15d, 0x15e, 0x15f, 0x160, 0x161, 0x162, 0x163, 0x164, 0x165, 0x166, 0x167,
0x280, 0x281, 0x282, 0x283, 0x284, 0x285, 0x286, 0x287, 0x288, 0x289, 0x28a, 0x28b, 0x28c, 0x28d, 0x28e, 0x28f, 0x290, 0x291, 0x292, 0x293, 0x294, 0x295, 0x296, 0x297, 0x298, 0x299, 0x29a, 0x29b, 0x29c, 0x29d, 0x29e, 0x29f, 0x2a0, 0x2a1, 0x2a2, 0x2a3, 0x2a4, 0x2a5, 0x2a6, 0x2a7,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x028, 0x029, 0x02a, 0x02b, 0x02c, 0x02d, 0x02e, 0x02f, 0x030, 0x031, 0x032, 0x033, 0x034, 0x035, 0x036, 0x037, 0x038, 0x039, 0x03a, 0x03b, 0x03c, 0x03d, 0x03e, 0x03f, 0x040, 0x041, 0x042, 0x043, 0x044, 0x045, 0x046, 0x047, 0x048, 0x049, 0x04a, 0x04b, 0x04c, 0x04d, 0x04e, 0x04f,
0x168, 0x169, 0x16a, 0x16b, 0x16c, 0x16d, 0x16e, 0x16f, 0x170, 0x171, 0x172, 0x173, 0x174, 0x175, 0x176, 0x177, 0x178, 0x179, 0x17a, 0x17b, 0x17c, 0x17d, 0x17e, 0x17f, 0x180, 0x181, 0x182, 0x183, 0x184, 0x185, 0x186, 0x187, 0x188, 0x189, 0x18a, 0x18b, 0x18c, 0x18d, 0x18e, 0x18f,
0x2a8, 0x2a9, 0x2aa, 0x2ab, 0x2ac, 0x2ad, 0x2ae, 0x2af, 0x2b0, 0x2b1, 0x2b2, 0x2b3, 0x2b4, 0x2b5, 0x2b6, 0x2b7, 0x2b8, 0x2b9, 0x2ba, 0x2bb, 0x2bc, 0x2bd, 0x2be, 0x2bf, 0x2c0, 0x2c1, 0x2c2, 0x2c3, 0x2c4, 0x2c5, 0x2c6, 0x2c7, 0x2c8, 0x2c9, 0x2ca, 0x2cb, 0x2cc, 0x2cd, 0x2ce, 0x2cf,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x050, 0x051, 0x052, 0x053, 0x054, 0x055, 0x056, 0x057, 0x058, 0x059, 0x05a, 0x05b, 0x05c, 0x05d, 0x05e, 0x05f, 0x060, 0x061, 0x062, 0x063, 0x064, 0x065, 0x066, 0x067, 0x068, 0x069, 0x06a, 0x06b, 0x06c, 0x06d, 0x06e, 0x06f, 0x070, 0x071, 0x072, 0x073, 0x074, 0x075, 0x076, 0x077,
0x190, 0x191, 0x192, 0x193, 0x194, 0x195, 0x196, 0x197, 0x198, 0x199, 0x19a, 0x19b, 0x19c, 0x19d, 0x19e, 0x19f, 0x1a0, 0x1a1, 0x1a2, 0x1a3, 0x1a4, 0x1a5, 0x1a6, 0x1a7, 0x1a8, 0x1a9, 0x1aa, 0x1ab, 0x1ac, 0x1ad, 0x1ae, 0x1af, 0x1b0, 0x1b1, 0x1b2, 0x1b3, 0x1b4, 0x1b5, 0x1b6, 0x1b7,
0x2d0, 0x2d1, 0x2d2, 0x2d3, 0x2d4, 0x2d5, 0x2d6, 0x2d7, 0x2d8, 0x2d9, 0x2da, 0x2db, 0x2dc, 0x2dd, 0x2de, 0x2df, 0x2e0, 0x2e1, 0x2e2, 0x2e3, 0x2e4, 0x2e5, 0x2e6, 0x2e7, 0x2e8, 0x2e9, 0x2ea, 0x2eb, 0x2ec, 0x2ed, 0x2ee, 0x2ef, 0x2f0, 0x2f1, 0x2f2, 0x2f3, 0x2f4, 0x2f5, 0x2f6, 0x2f7,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x078, 0x079, 0x07a, 0x07b, 0x07c, 0x07d, 0x07e, 0x07f, 0x080, 0x081, 0x082, 0x083, 0x084, 0x085, 0x086, 0x087, 0x088, 0x089, 0x08a, 0x08b, 0x08c, 0x08d, 0x08e, 0x08f, 0x090, 0x091, 0x092, 0x093, 0x094, 0x095, 0x096, 0x097, 0x098, 0x099, 0x09a, 0x09b, 0x09c, 0x09d, 0x09e, 0x09f,
0x1b8, 0x1b9, 0x1ba, 0x1bb, 0x1bc, 0x1bd, 0x1be, 0x1bf, 0x1c0, 0x1c1, 0x1c2, 0x1c3, 0x1c4, 0x1c5, 0x1c6, 0x1c7, 0x1c8, 0x1c9, 0x1ca, 0x1cb, 0x1cc, 0x1cd, 0x1ce, 0x1cf, 0x1d0, 0x1d1, 0x1d2, 0x1d3, 0x1d4, 0x1d5, 0x1d6, 0x1d7, 0x1d8, 0x1d9, 0x1da, 0x1db, 0x1dc, 0x1dd, 0x1de, 0x1df,
0x2f8, 0x2f9, 0x2fa, 0x2fb, 0x2fc, 0x2fd, 0x2fe, 0x2ff, 0x300, 0x301, 0x302, 0x303, 0x304, 0x305, 0x306, 0x307, 0x308, 0x309, 0x30a, 0x30b, 0x30c, 0x30d, 0x30e, 0x30f, 0x310, 0x311, 0x312, 0x313, 0x314, 0x315, 0x316, 0x317, 0x318, 0x319, 0x31a, 0x31b, 0x31c, 0x31d, 0x31e, 0x31f,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x0a0, 0x0a1, 0x0a2, 0x0a3, 0x0a4, 0x0a5, 0x0a6, 0x0a7, 0x0a8, 0x0a9, 0x0aa, 0x0ab, 0x0ac, 0x0ad, 0x0ae, 0x0af, 0x0b0, 0x0b1, 0x0b2, 0x0b3, 0x0b4, 0x0b5, 0x0b6, 0x0b7, 0x0b8, 0x0b9, 0x0ba, 0x0bb, 0x0bc, 0x0bd, 0x0be, 0x0bf, 0x0c0, 0x0c1, 0x0c2, 0x0c3, 0x0c4, 0x0c5, 0x0c6, 0x0c7,
0x1e0, 0x1e1, 0x1e2, 0x1e3, 0x1e4, 0x1e5, 0x1e6, 0x1e7, 0x1e8, 0x1e9, 0x1ea, 0x1eb, 0x1ec, 0x1ed, 0x1ee, 0x1ef, 0x1f0, 0x1f1, 0x1f2, 0x1f3, 0x1f4, 0x1f5, 0x1f6, 0x1f7, 0x1f8, 0x1f9, 0x1fa, 0x1fb, 0x1fc, 0x1fd, 0x1fe, 0x1ff, 0x200, 0x201, 0x202, 0x203, 0x204, 0x205, 0x206, 0x207,
0x320, 0x321, 0x322, 0x323, 0x324, 0x325, 0x326, 0x327, 0x328, 0x329, 0x32a, 0x32b, 0x32c, 0x32d, 0x32e, 0x32f, 0x330, 0x331, 0x332, 0x333, 0x334, 0x335, 0x336, 0x337, 0x338, 0x339, 0x33a, 0x33b, 0x33c, 0x33d, 0x33e, 0x33f, 0x340, 0x341, 0x342, 0x343, 0x344, 0x345, 0x346, 0x347,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x0c8, 0x0c9, 0x0ca, 0x0cb, 0x0cc, 0x0cd, 0x0ce, 0x0cf, 0x0d0, 0x0d1, 0x0d2, 0x0d3, 0x0d4, 0x0d5, 0x0d6, 0x0d7, 0x0d8, 0x0d9, 0x0da, 0x0db, 0x0dc, 0x0dd, 0x0de, 0x0df, 0x0e0, 0x0e1, 0x0e2, 0x0e3, 0x0e4, 0x0e5, 0x0e6, 0x0e7, 0x0e8, 0x0e9, 0x0ea, 0x0eb, 0x0ec, 0x0ed, 0x0ee, 0x0ef,
0x208, 0x209, 0x20a, 0x20b, 0x20c, 0x20d, 0x20e, 0x20f, 0x210, 0x211, 0x212, 0x213, 0x214, 0x215, 0x216, 0x217, 0x218, 0x219, 0x21a, 0x21b, 0x21c, 0x21d, 0x21e, 0x21f, 0x220, 0x221, 0x222, 0x223, 0x224, 0x225, 0x226, 0x227, 0x228, 0x229, 0x22a, 0x22b, 0x22c, 0x22d, 0x22e, 0x22f,
0x348, 0x349, 0x34a, 0x34b, 0x34c, 0x34d, 0x34e, 0x34f, 0x350, 0x351, 0x352, 0x353, 0x354, 0x355, 0x356, 0x357, 0x358, 0x359, 0x35a, 0x35b, 0x35c, 0x35d, 0x35e, 0x35f, 0x360, 0x361, 0x362, 0x363, 0x364, 0x365, 0x366, 0x367, 0x368, 0x369, 0x36a, 0x36b, 0x36c, 0x36d, 0x36e, 0x36f,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x0f0, 0x0f1, 0x0f2, 0x0f3, 0x0f4, 0x0f5, 0x0f6, 0x0f7, 0x0f8, 0x0f9, 0x0fa, 0x0fb, 0x0fc, 0x0fd, 0x0fe, 0x0ff, 0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109, 0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112, 0x113, 0x114, 0x115, 0x116, 0x117,
0x230, 0x231, 0x232, 0x233, 0x234, 0x235, 0x236, 0x237, 0x238, 0x239, 0x23a, 0x23b, 0x23c, 0x23d, 0x23e, 0x23f, 0x240, 0x241, 0x242, 0x243, 0x244, 0x245, 0x246, 0x247, 0x248, 0x249, 0x24a, 0x24b, 0x24c, 0x24d, 0x24e, 0x24f, 0x250, 0x251, 0x252, 0x253, 0x254, 0x255, 0x256, 0x257,
0x370, 0x371, 0x372, 0x373, 0x374, 0x375, 0x376, 0x377, 0x378, 0x379, 0x37a, 0x37b, 0x37c, 0x37d, 0x37e, 0x37f, 0x380, 0x381, 0x382, 0x383, 0x384, 0x385, 0x386, 0x387, 0x388, 0x389, 0x38a, 0x38b, 0x38c, 0x38d, 0x38e, 0x38f, 0x390, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
0x118, 0x119, 0x11a, 0x11b, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 0x122, 0x123, 0x124, 0x125, 0x126, 0x127, 0x128, 0x129, 0x12a, 0x12b, 0x12c, 0x12d, 0x12e, 0x12f, 0x130, 0x131, 0x132, 0x133, 0x134, 0x135, 0x136, 0x137, 0x138, 0x139, 0x13a, 0x13b, 0x13c, 0x13d, 0x13e, 0x13f,
0x258, 0x259, 0x25a, 0x25b, 0x25c, 0x25d, 0x25e, 0x25f, 0x260, 0x261, 0x262, 0x263, 0x264, 0x265, 0x266, 0x267, 0x268, 0x269, 0x26a, 0x26b, 0x26c, 0x26d, 0x26e, 0x26f, 0x270, 0x271, 0x272, 0x273, 0x274, 0x275, 0x276, 0x277, 0x278, 0x279, 0x27a, 0x27b, 0x27c, 0x27d, 0x27e, 0x27f,
0x398, 0x399, 0x39a, 0x39b, 0x39c, 0x39d, 0x39e, 0x39f, 0x3a0, 0x3a1, 0x3a2, 0x3a3, 0x3a4, 0x3a5, 0x3a6, 0x3a7, 0x3a8, 0x3a9, 0x3aa, 0x3ab, 0x3ac, 0x3ad, 0x3ae, 0x3af, 0x3b0, 0x3b1, 0x3b2, 0x3b3, 0x3b4, 0x3b5, 0x3b6, 0x3b7, 0x3b8, 0x3b9, 0x3ba, 0x3bb, 0x3bc, 0x3bd, 0x3be, 0x3bf,
0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,

};
/*
 * Set up UART SPI master mode and timers for sync pulses
 */
void video()
{
  cli();
  UBRR0 = 0; // must be zero before enabling the transmitter
  XCK0_DDR  |= _BV(XCK0); // set XCK pin as output to enable master mode
  UCSR0C     = _BV (UMSEL00) | _BV (UMSEL01);  // SPI master mode
  DDR_VID   |= _BV(VID_PIN);
  DDR_SYNC  |= _BV(SYNC_PIN);
  PORT_VID  &= ~_BV(VID_PIN);
  PORT_SYNC |= _BV(SYNC_PIN);
  TCCR1A     = _BV(COM1A1) | _BV(COM1A0) | _BV(WGM11); // inverted fast pwm mode on timer 2
  TCCR1B     = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
  ICR1       = _NTSC_CYCLES_SCANLINE;
  OCR1A      = _CYCLES_HSYNC;
  OCR1B      = _NTSC_CYCLES_OUTPUT_START - 79;
  TIMSK1     = _BV(OCIE1B);
  TIMSK0     = 0; // turn timer0 off!
  SMCR       = _BV(SE); // allow IDLE sleep mode
  sei();
  //
  // Clear the video buffer and print out sample text
  //
  
  // for (int i = 0; i< 24; i++)
  // {
  //   for (int j = 0; j< 0x28;j++)
  //   {
  //       sprintf(buf, "0x%03x, ", (convertVideo[i] + j));
  //       Serial1.print(buf);
  //   }
  //   Serial1.println();
  // }

}
//
// Handle scanline timing
//
ISR(TIMER1_COMPA_vect)
{
  sei();
  asm("sleep\n"); // for clock synchronization during active lines
}
ISR(TIMER1_COMPB_vect)
{
  line_handler();
  scanline++;
}
//
// Inactive scanlines
//
void blank_line(void)
{
  if (scanline == _NTSC_LINE_STOP_VSYNC)
  {
    OCR1A = _CYCLES_HSYNC;
  }
  else if ( scanline == _NTSC_LINE_MID - (VID_HEIGHT*CELL_HEIGHT)/2)
  {
    TIMSK1       = _BV(OCIE1A) | _BV(OCIE1B);
    videoptr     = videomem;
    line_handler = &active_line;
  }
  else if (scanline > _NTSC_LINE_FRAME)
  {
    OCR1A = _CYCLES_VSYNC;
    scanline = 0;
  }
}
//
// Active scanlines
//
void active_line(void)
{
  register char *charPtr;
  register int charCol;
  byte p ;
  static byte charRow = 0;  

  UDR0 = 0;
  UCSR0B = _BV(TXEN0); // this spits out an idle bit (white pixel) so move it off the left side of the screen
  charPtr = videoptr; 
  while ((UCSR0A & _BV (UDRE0)) == 0);
  UDR0 = 0;
  charCol = (int)&charROM + (charRow<<7); // overlap with some initialization
  while ((UCSR0A & _BV (UDRE0)) == 0);
  UDR0 = 0;
  while ((UCSR0A & _BV (UDRE0)) == 0);
  UDR0 = 0;
  while ((UCSR0A & _BV (UDRE0)) == 0);
  UDR0 = 0;
  p = VID_WIDTH;
  while ((UCSR0A & _BV (UDRE0)) == 0);
  UDR0 = 0;
  while (p--) // draw the character line
    UDR0 = pgm_read_byte_near(charCol + *charPtr++);
  while ((UCSR0A & _BV (TXC0)) == 0); // wait for pixels to shift out
  UCSR0B = 0;
  if (++charRow == CELL_HEIGHT)
  {
    charRow = 0;
    if (scanline == _NTSC_LINE_MID + (VID_HEIGHT*CELL_HEIGHT)/2)
    {
      TIMSK1 = _BV(OCIE1B);
      line_handler = &blank_line;
      vblank=1; // signal new frame
    }
    else
    {
      videoptr += VID_WIDTH;
    }
  }
}
/*
 * Character output routines.
 */

void videowrite(short address, unsigned char value)
{
  	value &= 0x7f;
    videomem[convertVideo[address-0x400]] = value;
}

unsigned char videoread(short address)
{
    return videomem[convertVideo[address-0x400]];
}



